syntax = "proto3";

package fs;

import "google/protobuf/timestamp.proto";

service FileSystem {
  rpc Touch(TouchRequest) returns (TouchResponse);
  rpc Cd(CdRequest) returns (CdResponse);
  rpc Mkdir(MkdirRequest) returns (MkdirResponse);
  rpc Rm(RmRequest) returns (RmResponse);
  rpc Cp(CpRequest) returns (CpResponse);
  rpc Mv(MvRequest) returns (MvResponse);
  rpc Ls(LsRequest) returns (LsResponse);
  rpc Cat(CatRequest) returns (CatResponse);
  rpc Pwd(PwdRequest) returns (PwdResponse);

  rpc Tail(TailRequest) returns (stream TailChunk);
  rpc Grep(GrepRequest) returns (stream GrepMatch);

  rpc Echo(EchoRequest) returns (EchoResponse);
}

message Status { // 成功・失敗を統一的に返す
  bool ok = 1;
  string message = 2; // エラーメッセージ等
}

// ファイル属性（ls・grep などで再利用）
message FileInfo {
  string name = 1;
  uint64 size = 2; // bytes
  bool is_dir = 3;
  google.protobuf.Timestamp modified = 4;
}

message TouchRequest {
  string session_id = 1;
  string path = 2; // 作成するファイル
}

message TouchResponse { Status status = 1; }

message CdRequest {
  string session_id = 1;
  string path = 2; // 移動先
}

message CdResponse {
  Status status = 1;
  string new_cwd = 2; // 移動後のカレントディレクトリ
}

message MkdirRequest {
  string session_id = 1;
  string path = 2;
  bool parents = 3; // -p 相当
}

message MkdirResponse { Status status = 1; }

message RmRequest {
  string session_id = 1;
  string path = 2;
  bool recursive = 3; // -r / -R
  bool force = 4;     // -f
}

message RmResponse { Status status = 1; }

message CpRequest {
  string session_id = 1;
  string src = 2;
  string dst = 3;
  bool recursive = 4; // -r
  bool overwrite = 5;
}

message CpResponse { Status status = 1; }

message MvRequest {
  string session_id = 1;
  string src = 2;
  string dst = 3;
  bool overwrite = 4;
}

message MvResponse { Status status = 1; }

message LsRequest {
  string session_id = 1;
  string path = 2;      // "" ならカレント
  bool all = 3;         // -a
  bool long_format = 4; // -l
}

message LsResponse { repeated FileInfo entries = 1; }

message CatRequest {
  string session_id = 1;
  string path = 2;
}

message CatResponse {
  bytes content = 1; // 中身をバイナリで
}

message PwdRequest { string session_id = 1; }

message PwdResponse { string cwd = 1; }

message TailRequest {
  string session_id = 1;
  string path = 2;
  uint32 lines = 3; // 初期表示行数 (default 10)
  bool follow = 4;  // -f
}

message TailChunk { // ストリームで 1 行ずつ
  string line = 1;
  bool eof = 2; // follow=false の場合にラストで true
}

message GrepRequest {
  string session_id = 1;
  string pattern = 2;        // 正規表現
  repeated string paths = 3; // 対象ファイル／ディレクトリ
  bool recursive = 4;        // -r
  bool ignore_case = 5;      // -i
}

message GrepMatch {
  string file = 1;
  uint64 line_number = 2;
  string line_text = 3;
}

message EchoRequest {
  string session_id = 1;
  string text = 2;
  string dst = 3;  // リダイレクト先ファイル ("" なら標準出力)
  bool append = 4; // >> 追加モード
}

message EchoResponse { Status status = 1; }
