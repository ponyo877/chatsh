// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file chatsh.proto (package fs, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum fs.NodeType
 */
export enum NodeType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: ROOM = 1;
   */
  ROOM = 1,

  /**
   * @generated from enum value: DIRECTORY = 2;
   */
  DIRECTORY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(NodeType)
proto3.util.setEnumType(NodeType, "fs.NodeType", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "ROOM" },
  { no: 2, name: "DIRECTORY" },
]);

/**
 * @generated from message fs.ListMessagesRequest
 */
export class ListMessagesRequest extends Message$1<ListMessagesRequest> {
  /**
   * @generated from field: string room_path = 1;
   */
  roomPath = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<ListMessagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.ListMessagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMessagesRequest {
    return new ListMessagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMessagesRequest {
    return new ListMessagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMessagesRequest {
    return new ListMessagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMessagesRequest | PlainMessage<ListMessagesRequest> | undefined, b: ListMessagesRequest | PlainMessage<ListMessagesRequest> | undefined): boolean {
    return proto3.util.equals(ListMessagesRequest, a, b);
  }
}

/**
 * @generated from message fs.ListMessagesResponse
 */
export class ListMessagesResponse extends Message$1<ListMessagesResponse> {
  /**
   * @generated from field: repeated fs.Message messages = 1;
   */
  messages: Message[] = [];

  constructor(data?: PartialMessage<ListMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.ListMessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messages", kind: "message", T: Message, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMessagesResponse {
    return new ListMessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMessagesResponse {
    return new ListMessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMessagesResponse {
    return new ListMessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMessagesResponse | PlainMessage<ListMessagesResponse> | undefined, b: ListMessagesResponse | PlainMessage<ListMessagesResponse> | undefined): boolean {
    return proto3.util.equals(ListMessagesResponse, a, b);
  }
}

/**
 * @generated from message fs.Status
 */
export class Status extends Message$1<Status> {
  /**
   * @generated from field: bool ok = 1;
   */
  ok = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<Status>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.Status";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Status {
    return new Status().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Status {
    return new Status().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Status {
    return new Status().fromJsonString(jsonString, options);
  }

  static equals(a: Status | PlainMessage<Status> | undefined, b: Status | PlainMessage<Status> | undefined): boolean {
    return proto3.util.equals(Status, a, b);
  }
}

/**
 * @generated from message fs.NodeInfo
 */
export class NodeInfo extends Message$1<NodeInfo> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string owner_name = 2;
   */
  ownerName = "";

  /**
   * @generated from field: fs.NodeType type = 3;
   */
  type = NodeType.UNKNOWN;

  /**
   * @generated from field: google.protobuf.Timestamp modified = 4;
   */
  modified?: Timestamp;

  constructor(data?: PartialMessage<NodeInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.NodeInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(NodeType) },
    { no: 4, name: "modified", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeInfo {
    return new NodeInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeInfo {
    return new NodeInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeInfo {
    return new NodeInfo().fromJsonString(jsonString, options);
  }

  static equals(a: NodeInfo | PlainMessage<NodeInfo> | undefined, b: NodeInfo | PlainMessage<NodeInfo> | undefined): boolean {
    return proto3.util.equals(NodeInfo, a, b);
  }
}

/**
 * @generated from message fs.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from field: string text_content = 1;
   */
  textContent = "";

  /**
   * @generated from field: string owner_name = 2;
   */
  ownerName = "";

  /**
   * @generated from field: google.protobuf.Timestamp created = 3;
   */
  created?: Timestamp;

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text_content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * @generated from message fs.CheckDirectoryExistsRequest
 */
export class CheckDirectoryExistsRequest extends Message$1<CheckDirectoryExistsRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  constructor(data?: PartialMessage<CheckDirectoryExistsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.CheckDirectoryExistsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckDirectoryExistsRequest {
    return new CheckDirectoryExistsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckDirectoryExistsRequest {
    return new CheckDirectoryExistsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckDirectoryExistsRequest {
    return new CheckDirectoryExistsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckDirectoryExistsRequest | PlainMessage<CheckDirectoryExistsRequest> | undefined, b: CheckDirectoryExistsRequest | PlainMessage<CheckDirectoryExistsRequest> | undefined): boolean {
    return proto3.util.equals(CheckDirectoryExistsRequest, a, b);
  }
}

/**
 * @generated from message fs.CheckDirectoryExistsResponse
 */
export class CheckDirectoryExistsResponse extends Message$1<CheckDirectoryExistsResponse> {
  /**
   * @generated from field: bool exists = 1;
   */
  exists = false;

  constructor(data?: PartialMessage<CheckDirectoryExistsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.CheckDirectoryExistsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckDirectoryExistsResponse {
    return new CheckDirectoryExistsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckDirectoryExistsResponse {
    return new CheckDirectoryExistsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckDirectoryExistsResponse {
    return new CheckDirectoryExistsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckDirectoryExistsResponse | PlainMessage<CheckDirectoryExistsResponse> | undefined, b: CheckDirectoryExistsResponse | PlainMessage<CheckDirectoryExistsResponse> | undefined): boolean {
    return proto3.util.equals(CheckDirectoryExistsResponse, a, b);
  }
}

/**
 * @generated from message fs.GetConfigRequest
 */
export class GetConfigRequest extends Message$1<GetConfigRequest> {
  /**
   * @generated from field: string owner_token = 2;
   */
  ownerToken = "";

  constructor(data?: PartialMessage<GetConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.GetConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "owner_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConfigRequest | PlainMessage<GetConfigRequest> | undefined, b: GetConfigRequest | PlainMessage<GetConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetConfigRequest, a, b);
  }
}

/**
 * @generated from message fs.GetConfigResponse
 */
export class GetConfigResponse extends Message$1<GetConfigResponse> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  constructor(data?: PartialMessage<GetConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.GetConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigResponse {
    return new GetConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigResponse {
    return new GetConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigResponse {
    return new GetConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetConfigResponse | PlainMessage<GetConfigResponse> | undefined, b: GetConfigResponse | PlainMessage<GetConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetConfigResponse, a, b);
  }
}

/**
 * @generated from message fs.SetConfigRequest
 */
export class SetConfigRequest extends Message$1<SetConfigRequest> {
  /**
   * @generated from field: string owner_token = 1;
   */
  ownerToken = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  constructor(data?: PartialMessage<SetConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.SetConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetConfigRequest {
    return new SetConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetConfigRequest {
    return new SetConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetConfigRequest {
    return new SetConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetConfigRequest | PlainMessage<SetConfigRequest> | undefined, b: SetConfigRequest | PlainMessage<SetConfigRequest> | undefined): boolean {
    return proto3.util.equals(SetConfigRequest, a, b);
  }
}

/**
 * @generated from message fs.SetConfigResponse
 */
export class SetConfigResponse extends Message$1<SetConfigResponse> {
  /**
   * @generated from field: fs.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<SetConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.SetConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetConfigResponse {
    return new SetConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetConfigResponse {
    return new SetConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetConfigResponse {
    return new SetConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetConfigResponse | PlainMessage<SetConfigResponse> | undefined, b: SetConfigResponse | PlainMessage<SetConfigResponse> | undefined): boolean {
    return proto3.util.equals(SetConfigResponse, a, b);
  }
}

/**
 * @generated from message fs.CreateRoomRequest
 */
export class CreateRoomRequest extends Message$1<CreateRoomRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: string owner_token = 2;
   */
  ownerToken = "";

  constructor(data?: PartialMessage<CreateRoomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.CreateRoomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined, b: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined): boolean {
    return proto3.util.equals(CreateRoomRequest, a, b);
  }
}

/**
 * @generated from message fs.CreateRoomResponse
 */
export class CreateRoomResponse extends Message$1<CreateRoomResponse> {
  /**
   * @generated from field: fs.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<CreateRoomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.CreateRoomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoomResponse {
    return new CreateRoomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoomResponse {
    return new CreateRoomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoomResponse {
    return new CreateRoomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoomResponse | PlainMessage<CreateRoomResponse> | undefined, b: CreateRoomResponse | PlainMessage<CreateRoomResponse> | undefined): boolean {
    return proto3.util.equals(CreateRoomResponse, a, b);
  }
}

/**
 * @generated from message fs.CreateDirectoryRequest
 */
export class CreateDirectoryRequest extends Message$1<CreateDirectoryRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: string owner_token = 2;
   */
  ownerToken = "";

  constructor(data?: PartialMessage<CreateDirectoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.CreateDirectoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDirectoryRequest {
    return new CreateDirectoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDirectoryRequest {
    return new CreateDirectoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDirectoryRequest {
    return new CreateDirectoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDirectoryRequest | PlainMessage<CreateDirectoryRequest> | undefined, b: CreateDirectoryRequest | PlainMessage<CreateDirectoryRequest> | undefined): boolean {
    return proto3.util.equals(CreateDirectoryRequest, a, b);
  }
}

/**
 * @generated from message fs.CreateDirectoryResponse
 */
export class CreateDirectoryResponse extends Message$1<CreateDirectoryResponse> {
  /**
   * @generated from field: fs.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<CreateDirectoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.CreateDirectoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDirectoryResponse {
    return new CreateDirectoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDirectoryResponse {
    return new CreateDirectoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDirectoryResponse {
    return new CreateDirectoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDirectoryResponse | PlainMessage<CreateDirectoryResponse> | undefined, b: CreateDirectoryResponse | PlainMessage<CreateDirectoryResponse> | undefined): boolean {
    return proto3.util.equals(CreateDirectoryResponse, a, b);
  }
}

/**
 * @generated from message fs.DeletePathRequest
 */
export class DeletePathRequest extends Message$1<DeletePathRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: string owner_token = 2;
   */
  ownerToken = "";

  constructor(data?: PartialMessage<DeletePathRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.DeletePathRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePathRequest {
    return new DeletePathRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePathRequest {
    return new DeletePathRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePathRequest {
    return new DeletePathRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePathRequest | PlainMessage<DeletePathRequest> | undefined, b: DeletePathRequest | PlainMessage<DeletePathRequest> | undefined): boolean {
    return proto3.util.equals(DeletePathRequest, a, b);
  }
}

/**
 * @generated from message fs.DeletePathResponse
 */
export class DeletePathResponse extends Message$1<DeletePathResponse> {
  /**
   * @generated from field: fs.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<DeletePathResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.DeletePathResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePathResponse {
    return new DeletePathResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePathResponse {
    return new DeletePathResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePathResponse {
    return new DeletePathResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePathResponse | PlainMessage<DeletePathResponse> | undefined, b: DeletePathResponse | PlainMessage<DeletePathResponse> | undefined): boolean {
    return proto3.util.equals(DeletePathResponse, a, b);
  }
}

/**
 * @generated from message fs.CopyPathRequest
 */
export class CopyPathRequest extends Message$1<CopyPathRequest> {
  /**
   * @generated from field: string source_path = 1;
   */
  sourcePath = "";

  /**
   * @generated from field: string destination_path = 2;
   */
  destinationPath = "";

  /**
   * @generated from field: string owner_token = 3;
   */
  ownerToken = "";

  constructor(data?: PartialMessage<CopyPathRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.CopyPathRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "destination_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyPathRequest {
    return new CopyPathRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyPathRequest {
    return new CopyPathRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyPathRequest {
    return new CopyPathRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CopyPathRequest | PlainMessage<CopyPathRequest> | undefined, b: CopyPathRequest | PlainMessage<CopyPathRequest> | undefined): boolean {
    return proto3.util.equals(CopyPathRequest, a, b);
  }
}

/**
 * @generated from message fs.CopyPathResponse
 */
export class CopyPathResponse extends Message$1<CopyPathResponse> {
  /**
   * @generated from field: fs.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<CopyPathResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.CopyPathResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyPathResponse {
    return new CopyPathResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyPathResponse {
    return new CopyPathResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyPathResponse {
    return new CopyPathResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CopyPathResponse | PlainMessage<CopyPathResponse> | undefined, b: CopyPathResponse | PlainMessage<CopyPathResponse> | undefined): boolean {
    return proto3.util.equals(CopyPathResponse, a, b);
  }
}

/**
 * @generated from message fs.MovePathRequest
 */
export class MovePathRequest extends Message$1<MovePathRequest> {
  /**
   * @generated from field: string source_path = 1;
   */
  sourcePath = "";

  /**
   * @generated from field: string destination_path = 2;
   */
  destinationPath = "";

  /**
   * @generated from field: string owner_token = 3;
   */
  ownerToken = "";

  constructor(data?: PartialMessage<MovePathRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.MovePathRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "destination_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MovePathRequest {
    return new MovePathRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MovePathRequest {
    return new MovePathRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MovePathRequest {
    return new MovePathRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MovePathRequest | PlainMessage<MovePathRequest> | undefined, b: MovePathRequest | PlainMessage<MovePathRequest> | undefined): boolean {
    return proto3.util.equals(MovePathRequest, a, b);
  }
}

/**
 * @generated from message fs.MovePathResponse
 */
export class MovePathResponse extends Message$1<MovePathResponse> {
  /**
   * @generated from field: fs.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<MovePathResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.MovePathResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MovePathResponse {
    return new MovePathResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MovePathResponse {
    return new MovePathResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MovePathResponse {
    return new MovePathResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MovePathResponse | PlainMessage<MovePathResponse> | undefined, b: MovePathResponse | PlainMessage<MovePathResponse> | undefined): boolean {
    return proto3.util.equals(MovePathResponse, a, b);
  }
}

/**
 * @generated from message fs.ListNodesRequest
 */
export class ListNodesRequest extends Message$1<ListNodesRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  constructor(data?: PartialMessage<ListNodesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.ListNodesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNodesRequest {
    return new ListNodesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNodesRequest {
    return new ListNodesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNodesRequest {
    return new ListNodesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListNodesRequest | PlainMessage<ListNodesRequest> | undefined, b: ListNodesRequest | PlainMessage<ListNodesRequest> | undefined): boolean {
    return proto3.util.equals(ListNodesRequest, a, b);
  }
}

/**
 * @generated from message fs.ListNodesResponse
 */
export class ListNodesResponse extends Message$1<ListNodesResponse> {
  /**
   * @generated from field: repeated fs.NodeInfo entries = 1;
   */
  entries: NodeInfo[] = [];

  constructor(data?: PartialMessage<ListNodesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.ListNodesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: NodeInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNodesResponse {
    return new ListNodesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNodesResponse {
    return new ListNodesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNodesResponse {
    return new ListNodesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListNodesResponse | PlainMessage<ListNodesResponse> | undefined, b: ListNodesResponse | PlainMessage<ListNodesResponse> | undefined): boolean {
    return proto3.util.equals(ListNodesResponse, a, b);
  }
}

/**
 * @generated from message fs.StreamMessageRequest
 */
export class StreamMessageRequest extends Message$1<StreamMessageRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: string initi_token = 2;
   */
  initiToken = "";

  /**
   * @generated from field: bool follow = 3;
   */
  follow = false;

  constructor(data?: PartialMessage<StreamMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.StreamMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "initi_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "follow", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamMessageRequest {
    return new StreamMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamMessageRequest {
    return new StreamMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamMessageRequest {
    return new StreamMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamMessageRequest | PlainMessage<StreamMessageRequest> | undefined, b: StreamMessageRequest | PlainMessage<StreamMessageRequest> | undefined): boolean {
    return proto3.util.equals(StreamMessageRequest, a, b);
  }
}

/**
 * @generated from message fs.Join
 */
export class Join extends Message$1<Join> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string room = 2;
   */
  room = "";

  constructor(data?: PartialMessage<Join>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.Join";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Join {
    return new Join().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Join {
    return new Join().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Join {
    return new Join().fromJsonString(jsonString, options);
  }

  static equals(a: Join | PlainMessage<Join> | undefined, b: Join | PlainMessage<Join> | undefined): boolean {
    return proto3.util.equals(Join, a, b);
  }
}

/**
 * @generated from message fs.Chat
 */
export class Chat extends Message$1<Chat> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  constructor(data?: PartialMessage<Chat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.Chat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chat {
    return new Chat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chat {
    return new Chat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chat {
    return new Chat().fromJsonString(jsonString, options);
  }

  static equals(a: Chat | PlainMessage<Chat> | undefined, b: Chat | PlainMessage<Chat> | undefined): boolean {
    return proto3.util.equals(Chat, a, b);
  }
}

/**
 * @generated from message fs.ClientMessage
 */
export class ClientMessage extends Message$1<ClientMessage> {
  /**
   * @generated from oneof fs.ClientMessage.payload
   */
  payload: {
    /**
     * @generated from field: fs.Join join = 1;
     */
    value: Join;
    case: "join";
  } | {
    /**
     * @generated from field: fs.Chat chat = 2;
     */
    value: Chat;
    case: "chat";
  } | {
    /**
     * For tailing a room
     *
     * @generated from field: fs.Tail tail = 3;
     */
    value: Tail;
    case: "tail";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ClientMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.ClientMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "join", kind: "message", T: Join, oneof: "payload" },
    { no: 2, name: "chat", kind: "message", T: Chat, oneof: "payload" },
    { no: 3, name: "tail", kind: "message", T: Tail, oneof: "payload" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientMessage {
    return new ClientMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientMessage {
    return new ClientMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientMessage {
    return new ClientMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ClientMessage | PlainMessage<ClientMessage> | undefined, b: ClientMessage | PlainMessage<ClientMessage> | undefined): boolean {
    return proto3.util.equals(ClientMessage, a, b);
  }
}

/**
 * @generated from message fs.Tail
 */
export class Tail extends Message$1<Tail> {
  /**
   * @generated from field: string room_path = 1;
   */
  roomPath = "";

  constructor(data?: PartialMessage<Tail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.Tail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tail {
    return new Tail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tail {
    return new Tail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tail {
    return new Tail().fromJsonString(jsonString, options);
  }

  static equals(a: Tail | PlainMessage<Tail> | undefined, b: Tail | PlainMessage<Tail> | undefined): boolean {
    return proto3.util.equals(Tail, a, b);
  }
}

/**
 * @generated from message fs.ServerMessage
 */
export class ServerMessage extends Message$1<ServerMessage> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  constructor(data?: PartialMessage<ServerMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.ServerMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerMessage {
    return new ServerMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerMessage {
    return new ServerMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerMessage {
    return new ServerMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ServerMessage | PlainMessage<ServerMessage> | undefined, b: ServerMessage | PlainMessage<ServerMessage> | undefined): boolean {
    return proto3.util.equals(ServerMessage, a, b);
  }
}

/**
 * @generated from message fs.SearchMessageRequest
 */
export class SearchMessageRequest extends Message$1<SearchMessageRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: string pattern = 2;
   */
  pattern = "";

  constructor(data?: PartialMessage<SearchMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.SearchMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchMessageRequest {
    return new SearchMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchMessageRequest {
    return new SearchMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchMessageRequest {
    return new SearchMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchMessageRequest | PlainMessage<SearchMessageRequest> | undefined, b: SearchMessageRequest | PlainMessage<SearchMessageRequest> | undefined): boolean {
    return proto3.util.equals(SearchMessageRequest, a, b);
  }
}

/**
 * @generated from message fs.SearchMessageResponse
 */
export class SearchMessageResponse extends Message$1<SearchMessageResponse> {
  /**
   * @generated from field: repeated fs.Message messages = 1;
   */
  messages: Message[] = [];

  constructor(data?: PartialMessage<SearchMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.SearchMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messages", kind: "message", T: Message, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchMessageResponse {
    return new SearchMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchMessageResponse {
    return new SearchMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchMessageResponse {
    return new SearchMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchMessageResponse | PlainMessage<SearchMessageResponse> | undefined, b: SearchMessageResponse | PlainMessage<SearchMessageResponse> | undefined): boolean {
    return proto3.util.equals(SearchMessageResponse, a, b);
  }
}

/**
 * @generated from message fs.WriteMessageRequest
 */
export class WriteMessageRequest extends Message$1<WriteMessageRequest> {
  /**
   * @generated from field: string text_content = 1;
   */
  textContent = "";

  /**
   * @generated from field: string destination_path = 2;
   */
  destinationPath = "";

  /**
   * @generated from field: string owner_token = 3;
   */
  ownerToken = "";

  constructor(data?: PartialMessage<WriteMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.WriteMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text_content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "destination_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteMessageRequest {
    return new WriteMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteMessageRequest {
    return new WriteMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteMessageRequest {
    return new WriteMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WriteMessageRequest | PlainMessage<WriteMessageRequest> | undefined, b: WriteMessageRequest | PlainMessage<WriteMessageRequest> | undefined): boolean {
    return proto3.util.equals(WriteMessageRequest, a, b);
  }
}

/**
 * @generated from message fs.WriteMessageResponse
 */
export class WriteMessageResponse extends Message$1<WriteMessageResponse> {
  /**
   * @generated from field: fs.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<WriteMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "fs.WriteMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteMessageResponse {
    return new WriteMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteMessageResponse {
    return new WriteMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteMessageResponse {
    return new WriteMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WriteMessageResponse | PlainMessage<WriteMessageResponse> | undefined, b: WriteMessageResponse | PlainMessage<WriteMessageResponse> | undefined): boolean {
    return proto3.util.equals(WriteMessageResponse, a, b);
  }
}

