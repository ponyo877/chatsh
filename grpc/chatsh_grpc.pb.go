// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: grpc/chatsh.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileSystemService_CreateDirectory_FullMethodName = "/fs.FileSystemService/CreateDirectory"
	FileSystemService_DeletePath_FullMethodName      = "/fs.FileSystemService/DeletePath"
	FileSystemService_CopyPath_FullMethodName        = "/fs.FileSystemService/CopyPath"
	FileSystemService_MovePath_FullMethodName        = "/fs.FileSystemService/MovePath"
	FileSystemService_ListNodes_FullMethodName       = "/fs.FileSystemService/ListNodes"
	FileSystemService_ListMessages_FullMethodName    = "/fs.FileSystemService/ListMessages"
	FileSystemService_StreamMessage_FullMethodName   = "/fs.FileSystemService/StreamMessage"
	FileSystemService_SearchMessage_FullMethodName   = "/fs.FileSystemService/SearchMessage"
	FileSystemService_WriteMessage_FullMethodName    = "/fs.FileSystemService/WriteMessage"
)

// FileSystemServiceClient is the client API for FileSystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSystemServiceClient interface {
	CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*CreateDirectoryResponse, error)
	DeletePath(ctx context.Context, in *DeletePathRequest, opts ...grpc.CallOption) (*DeletePathResponse, error)
	CopyPath(ctx context.Context, in *CopyPathRequest, opts ...grpc.CallOption) (*CopyPathResponse, error)
	MovePath(ctx context.Context, in *MovePathRequest, opts ...grpc.CallOption) (*MovePathResponse, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	StreamMessage(ctx context.Context, in *StreamMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageChunk], error)
	SearchMessage(ctx context.Context, in *SearchMessageRequest, opts ...grpc.CallOption) (*SearchMessageResponse, error)
	WriteMessage(ctx context.Context, in *WriteMessageRequest, opts ...grpc.CallOption) (*WriteMessageResponse, error)
}

type fileSystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSystemServiceClient(cc grpc.ClientConnInterface) FileSystemServiceClient {
	return &fileSystemServiceClient{cc}
}

func (c *fileSystemServiceClient) CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*CreateDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDirectoryResponse)
	err := c.cc.Invoke(ctx, FileSystemService_CreateDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceClient) DeletePath(ctx context.Context, in *DeletePathRequest, opts ...grpc.CallOption) (*DeletePathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePathResponse)
	err := c.cc.Invoke(ctx, FileSystemService_DeletePath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceClient) CopyPath(ctx context.Context, in *CopyPathRequest, opts ...grpc.CallOption) (*CopyPathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyPathResponse)
	err := c.cc.Invoke(ctx, FileSystemService_CopyPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceClient) MovePath(ctx context.Context, in *MovePathRequest, opts ...grpc.CallOption) (*MovePathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovePathResponse)
	err := c.cc.Invoke(ctx, FileSystemService_MovePath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, FileSystemService_ListNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, FileSystemService_ListMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceClient) StreamMessage(ctx context.Context, in *StreamMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSystemService_ServiceDesc.Streams[0], FileSystemService_StreamMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMessageRequest, MessageChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSystemService_StreamMessageClient = grpc.ServerStreamingClient[MessageChunk]

func (c *fileSystemServiceClient) SearchMessage(ctx context.Context, in *SearchMessageRequest, opts ...grpc.CallOption) (*SearchMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchMessageResponse)
	err := c.cc.Invoke(ctx, FileSystemService_SearchMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemServiceClient) WriteMessage(ctx context.Context, in *WriteMessageRequest, opts ...grpc.CallOption) (*WriteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteMessageResponse)
	err := c.cc.Invoke(ctx, FileSystemService_WriteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSystemServiceServer is the server API for FileSystemService service.
// All implementations must embed UnimplementedFileSystemServiceServer
// for forward compatibility.
type FileSystemServiceServer interface {
	CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryResponse, error)
	DeletePath(context.Context, *DeletePathRequest) (*DeletePathResponse, error)
	CopyPath(context.Context, *CopyPathRequest) (*CopyPathResponse, error)
	MovePath(context.Context, *MovePathRequest) (*MovePathResponse, error)
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	StreamMessage(*StreamMessageRequest, grpc.ServerStreamingServer[MessageChunk]) error
	SearchMessage(context.Context, *SearchMessageRequest) (*SearchMessageResponse, error)
	WriteMessage(context.Context, *WriteMessageRequest) (*WriteMessageResponse, error)
	mustEmbedUnimplementedFileSystemServiceServer()
}

// UnimplementedFileSystemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileSystemServiceServer struct{}

func (UnimplementedFileSystemServiceServer) CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectory not implemented")
}
func (UnimplementedFileSystemServiceServer) DeletePath(context.Context, *DeletePathRequest) (*DeletePathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePath not implemented")
}
func (UnimplementedFileSystemServiceServer) CopyPath(context.Context, *CopyPathRequest) (*CopyPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyPath not implemented")
}
func (UnimplementedFileSystemServiceServer) MovePath(context.Context, *MovePathRequest) (*MovePathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovePath not implemented")
}
func (UnimplementedFileSystemServiceServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedFileSystemServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedFileSystemServiceServer) StreamMessage(*StreamMessageRequest, grpc.ServerStreamingServer[MessageChunk]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessage not implemented")
}
func (UnimplementedFileSystemServiceServer) SearchMessage(context.Context, *SearchMessageRequest) (*SearchMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessage not implemented")
}
func (UnimplementedFileSystemServiceServer) WriteMessage(context.Context, *WriteMessageRequest) (*WriteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMessage not implemented")
}
func (UnimplementedFileSystemServiceServer) mustEmbedUnimplementedFileSystemServiceServer() {}
func (UnimplementedFileSystemServiceServer) testEmbeddedByValue()                           {}

// UnsafeFileSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSystemServiceServer will
// result in compilation errors.
type UnsafeFileSystemServiceServer interface {
	mustEmbedUnimplementedFileSystemServiceServer()
}

func RegisterFileSystemServiceServer(s grpc.ServiceRegistrar, srv FileSystemServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileSystemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileSystemService_ServiceDesc, srv)
}

func _FileSystemService_CreateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).CreateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_CreateDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).CreateDirectory(ctx, req.(*CreateDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemService_DeletePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).DeletePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_DeletePath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).DeletePath(ctx, req.(*DeletePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemService_CopyPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).CopyPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_CopyPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).CopyPath(ctx, req.(*CopyPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemService_MovePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).MovePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_MovePath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).MovePath(ctx, req.(*MovePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemService_StreamMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileSystemServiceServer).StreamMessage(m, &grpc.GenericServerStream[StreamMessageRequest, MessageChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSystemService_StreamMessageServer = grpc.ServerStreamingServer[MessageChunk]

func _FileSystemService_SearchMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).SearchMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_SearchMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).SearchMessage(ctx, req.(*SearchMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystemService_WriteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServiceServer).WriteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSystemService_WriteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServiceServer).WriteMessage(ctx, req.(*WriteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSystemService_ServiceDesc is the grpc.ServiceDesc for FileSystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fs.FileSystemService",
	HandlerType: (*FileSystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDirectory",
			Handler:    _FileSystemService_CreateDirectory_Handler,
		},
		{
			MethodName: "DeletePath",
			Handler:    _FileSystemService_DeletePath_Handler,
		},
		{
			MethodName: "CopyPath",
			Handler:    _FileSystemService_CopyPath_Handler,
		},
		{
			MethodName: "MovePath",
			Handler:    _FileSystemService_MovePath_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _FileSystemService_ListNodes_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _FileSystemService_ListMessages_Handler,
		},
		{
			MethodName: "SearchMessage",
			Handler:    _FileSystemService_SearchMessage_Handler,
		},
		{
			MethodName: "WriteMessage",
			Handler:    _FileSystemService_WriteMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessage",
			Handler:       _FileSystemService_StreamMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/chatsh.proto",
}
